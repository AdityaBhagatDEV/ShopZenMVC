@model ShopZen.ViewModels.LoginViewModel

@{
    ViewBag.Title = "Login";
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            background-color: #f8f9fa;
            padding-top: 50px;
        }

        .form-container {
            max-width: 600px;
            margin: auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .form-group label {
            font-weight: bold;
        }

        .btn-outline-light {
            background-color: #007bff;
            color: white;
            border: none;
        }

            .btn-outline-light:hover {
                background-color: #0056b3;
            }

        .btn-primary {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container form-container">
        <h2 class="text-center">Login</h2>
        <form action="/Account/Login" method="post" role="form" class="needs-validation" novalidate>
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group row">
                @Html.LabelFor(m => m.Email, new { @class = "col-sm-3 col-form-label" })
                <div class="col-sm-9">
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @placeholder = "Enter your email", required = "required" })
                    <div class="invalid-feedback">Please enter your email.</div>
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(m => m.Password, new { @class = "col-sm-3 col-form-label" })
                <div class="col-sm-9">
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", @placeholder = "Enter your password", required = "required" })
                    <div class="invalid-feedback">Please enter your password.</div>
                </div>
            </div>

            <div class="form-group row">
                <div class="col-sm-9 offset-sm-3">
                    <input type="submit" value="Login" class="btn btn-outline-light btn-block" />
                </div>
            </div>

            <div class="form-group row">
                <div class="col-sm-9 offset-sm-3">
                    <a href="/Account/CreateAccount" class="btn btn-primary btn-block">Create an Account</a>
                </div>
            </div>
        </form>
    </div>

    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function() {
            'use strict';
            window.addEventListener('load', function() {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function(form) {
                    form.addEventListener('submit', function(event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
</body>
</html>
